/*
 * Copyright 2019-2023 NXP
 *
 * NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
 * used strictly in accordance with the applicable license terms. By expressly
 * accepting such terms or by downloading, installing, activating and/or otherwise
 * using the software, you are agreeing that you have read, and that you agree to
 * comply with and are bound by, such license terms.  If you do not agree to be
 * bound by the applicable license terms, then you may not retain, install,
 * activate or otherwise use the software.
 */

#ifndef GPTP
    #define GPTP

#include "gptp_def.h"
#include "gptp_err.h"

/*******************************************************************************
 * API
 ******************************************************************************/

/*!
 * @name gPTP Initialization
 * @{
 */

/*!
 *
 * @brief      This function initializes gPTP stack.
 *
 * @details    This function checks initial parameters for invalid values. Uses initial parameters
 *             to initialize the internal gPTP structures. The function checks the current link status.
 *             For all "up" links which are used for gPTP, it starts the gPTP software timer.
 *
 * @param[in]  prInitParams Pointer to structure containing initial parameters
 *
 * @return     gPTP error code.
 *
 */
gptp_err_type_t GPTP_GptpInit(const gptp_def_init_params_t *prInitParams);

/*! @} */

/*!
 * @name Data Input for gPTP
 * @{
 */

/*!
 *
 * @brief   This function handles the time stamps generated by the gPTP message transmission.
 *
 * @details This function handles the time stamps generated by the gPTP message transmission.
 *          The time stamp values are stored to the internal gPTP structures by the port number
 *          and frame ID for the future use.
 *
 * @param[in] u8Port gPTP port number from which the time stamp is received.
 * @param[in] u32TxTsS Tx time stamp value, seconds part.
 * @param[in] u32TxTsNs Tx time stamp value, nano seconds part.
 * @param[in] u8FrameId Id of frame, which generated the time stamp.
 *
 */
void GPTP_TimeStampHandler(uint8_t u8Port,
                           uint32_t u32TxTsS,
                           uint32_t u32TxTsNs,
                           uint8_t u8FrameId);

/*!
 *
 * @brief   This function updates the TX frame table.
 *
 * @details This function updates the TX frame table with the time stamp and port ID
 *          value for particular entry.
 *
 * @param[in] u8Port gPTP port number received the time stamp.
 * @param[in] u32BufferIndex Index of the frame buffer.
 * @param[in] u32TsSeconds Egress time stamp - seconds.
 * @param[in] u32TsNanoseconds Egress time stamp - nano seconds.
 *
 */
void GPTP_UpdateTimestampEntry(uint8_t u8Port,
                               uint32_t u32BufferIndex,
                               uint32_t u32TsSeconds,
                               uint32_t u32TsNanoseconds);

/*!
 *
 * @brief   This function receives the gPTP message.
 *
 * @details This function inspects the gPTP message type and extracts the gPTP data from
 *          the message.
 *
 * @param[in] rRxData structure containing all the necessary gPTP data for processing.
 *
 */
void GPTP_MsgReceive(gptp_def_rx_data_t rRxData);

/*! @} */

/*!
 * @name Periodic function
 * @{
 */

/*!
 *
 * @brief   This function increments gPTP internal software timer
 *
 * @details This function should be called once upon certain period.
 *          Recommended call period is 10ms.
 *
 */
void GPTP_TimerPeriodic(void);

/*! @} */

/*!
 * @name Error Management
 * @{
 */

/*!
 *
 * @brief     This function provides access to the error log.
 *
 * @details   This function provides access to the error log. The function
 *            returns error detail stored at the log index.
 *
 * @param[in] u16ErrIndex Error log index.
 * @return    Error logged at the index.
 *
 */
gptp_err_error_t GPTP_ErrReadIndex(uint16_t u16ErrIndex);

/*! @} */

/*!
 * @name Event Notifications
 * @{
 */

/*!
 *
 * @brief   This function should be called upon the "link up" event on the specific
 *          gPTP port.
 *
 * @details This function is called upon the link up event at the specific port
 *          and configures the gPTP stack accordingly (enables software timers,
 *          reset sync and pdelay intervals).
 *
 * @param[in] u8Switch  Number of the respective switch.
 * @param[in] u8Port    Number of the respective port on switch.
 *
 */
void GPTP_LinkUpNotify(uint8_t u8Switch,
                       uint8_t u8Port);

/*!
 *
 * @brief   This function should be called upon the "link down" event on the specific
 *          gPTP port.
 *
 * @details This function is called upon the link down event at the specific port
 *          and configures the port accordingly (disables software timers, resets
 *          sync and pdelay state machines).
 *
 * @param[in] u8Switch  Number of the respective switch.
 * @param[in] u8Port    Number of the respective port on switch.
 *
 */
void GPTP_LinkDownNotify(uint8_t u8Switch,
                         uint8_t u8Port);

/*! @} */

/*!
 * @name Sync interval API
 * @{
 */

/*!
 *
 * @brief       This function gets current sync ingerval from the specified domain/sync machine
 *
 * @details     The function provides current sync interval of the respective sync machine,
 *              for both - Master sync machines and Slave sync machines.
 *
 * @param[in]   u8Domain Domain number on which the sync interval is updated.
 * @param[in]   u8Machine Sync machine index on which the sync interval is updated.
 * @param[out]  s8SyncInterval Pointer to sync interval variable.
 *
 * @return      gPTP error code.
 */
gptp_err_type_t GPTP_SyncIntervalGet(uint8_t u8Domain,
                                     uint8_t u8Machine,
                                     int8_t *s8SyncInterval);

/*!
 *
 * @brief     This function sets sync interval for the specified domain/sync machine
 *
 * @details   For the Master sync machine, the API sets new sync interval. For Slave
 *            sync machine, the API transmits signaling message with sync interval update
 *            request.
 *
 * @param[in] u8Domain Domain number on which the sync interval is updated.
 * @param[in] u8Machine Sync machine index on which the sync interval is updated.
 * @param[in] s8SyncInterval New sync interval.
 *
 * @return    gPTP error code.
 */
gptp_err_type_t GPTP_SyncIntervalSet(uint8_t u8Domain,
                                     uint8_t u8Machine,
                                     int8_t s8SyncInterval);

/*! @} */

/*!
 * @name GM Offset estimation
 * @{
 */

/*!
 *
 * @brief       This function provides current offset to GM
 *
 * @details     The function provides current offset of the local clock to the Grand Master.
 *              If the local clock is not updated after startup, the retur value is 0x0x7FFFFFFF.
 *
 * @param[out]  rOffset Pointer to the Timestamp value of current GM offset.
 *
 * @return      gPTP error code.
 */
gptp_err_type_t GPTP_CurrentOffsetGet(gptp_def_timestamp_sig_t *rOffset);

/*! @} */

/*!
 * @name Internal use only (excluded from the user documentation)
 * @{
 */

/** @cond Internal */

/*!
 *
 * @brief      This function sends the gPTP message
 *
 * @details    This function increments frame ID, and stores details about the transmitted frame for the
 *             future check. Then, the complete data frame is prepared and sent. This function is called
 *             from the inside of the stack only and should not be used by the application.
 *
 * @param[in]  prTxData Pointer to structure containing data for transmission
 * @param[in]  u8Port gPTP port number from which the message is to be sent
 * @param[in]  u8MachineNum Index of machine, from which the message is to be sent. For Pdelay messages
 *                          the machine index is the same as gPTP port number.
 * @param[in]  u8DomainNum Index of domain, from which the message is to be sent. For Pdelay messages
 *                         the domain index is 0.
 *
 */
void GPTP_MsgTransmit(gptp_def_tx_data_t *prTxData,
                      const uint8_t u8Port,
                      const uint8_t u8MachineNum,
                      const uint8_t u8DomainNum);
/** @endcond */

/*! @} */

/*!
 *
 * @brief       Get pointer to the main structure holding gPTP states and configuration.
 *
 * @return      Pointer to the main gPTP structure.
 */
gptp_def_data_t* GPTP_GetMainStrPtr(void);

/*!
 * @name gPTP Counters
 * @{
 */

#ifdef GPTP_COUNTERS
/*!
 *
 * @brief       This function gets value of the gPTP counter.
 *
 * @details     The function reads the value of respective gPTP counter.
 *
 * @param[in]   u16Domain Domain number (uint16). Value 0xFFFF reads port counter value.
 * @param[in]   u8Port Port number.
 * @param[in]   rCntr gPTP Counter.
 * @param[out]  u32Value Pointer to the uint32_t value providing counter value.
 *
 * @return      gPTP error code.
 */
gptp_err_type_t GPTP_GetStatsValue(uint16_t u16Domain,
                                   uint8_t u8Port,
                                   gptp_def_counters_t rCntr,
                                   uint32_t *u32Value);

/*!
 *
 * @brief       This function clears all gPTP counters
 *
 * @details     The function clears gPTP counters. Domain and Port counters.
 *
 * @return      gPTP error code.
 */
gptp_err_type_t GPTP_ClearStats(void);
#endif /* GPTP_COUNTERS */
/*! @} */

#endif /* GPTP */
/*******************************************************************************
 * EOF
 ******************************************************************************/
